@page "/payment"
@layout NoMenuLayout
@using System.ComponentModel.DataAnnotations
@using CharityWebServer2.Data
@using CharityWebServer2.Models
@inject AppDbContext1 _context
@inject NavigationManager _navigationManager

<PageTitle>Info</PageTitle>

<h2 class="title">Поддержите благотворительный фонд Happy Hearts</h2>
<p class="subtitle">Своим взносом вы можете спасти человеческую жизнь.</p>

<EditForm Model="_donation" OnValidSubmit="async () => await HandleValidSubmit()" FormName="paymentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="fullName">ФИО</label>
        <InputText id="fullName" class="input" @bind-Value="_donation.FullName" />
        <ValidationMessage For="@(() => _donation.FullName)" />
    </div>

    <div class="form-group">
        <label for="email">Электронная почта</label>
        <InputText id="email" type="email" class="input" @bind-Value="_donation.Email" />
        <ValidationMessage For="@(() => _donation.Email)" />
    </div>

    <div class="form-group">
        <label for="amount">Сумма пожертвования (RUB)</label>
        <InputNumber id="amount" class="input" @bind-Value="_donation.Amount" />
        <ValidationMessage For="@(() => _donation.Amount)" />
    </div>

    <div class="form-group">
        <label for="paymentMethod">Способ оплаты</label>
        <InputSelect id="paymentMethod" class="input" @bind-Value="_donation.PaymentMethod" @onchange="OnPaymentMethodChanged">
            <option value="">Выберите способ оплаты</option>
            <option value="CreditCard">Кредитная карта</option>
            <option value="PayPal">PayPal</option>
        </InputSelect>
        <ValidationMessage For="@(() => _donation.PaymentMethod)" />
    </div>

    @if (_donation.PaymentMethod == "CreditCard")
    {
        <div class="form-group">
            <label for="cardNumber">Номер карты</label>
            <InputText id="cardNumber" class="input" @bind-Value="_donation.CardNumber" maxlength="16" />
            <ValidationMessage For="@(() => _donation.CardNumber)" />
        </div>

        <div class="form-inline">
            <div class="form-group half">
                <label for="expiry">Срок действия (MM/YY)</label>
                <InputText id="expiry" class="input" @bind-Value="_donation.Expiry" maxlength="5" placeholder="MM/YY" />
                <ValidationMessage For="@(() => _donation.Expiry)" />
            </div>

            <div class="form-group half">
                <label for="cvv">CVV</label>
                <InputText id="cvv" type="password" class="input" @bind-Value="_donation.CVV" maxlength="4" />
                <ValidationMessage For="@(() => _donation.CVV)" />
            </div>
        </div>
    }

    <button type="submit" class="btn">Пожертвовать</button>
</EditForm>

@if (_success)
{
    <div class="success-message">
        <h3>Спасибо Вам за пожертвование, @_donation.FullName! 💖</h3>
        <p>Ваша подержка поможет Happy Hearts сделать мир немного лучше!</p>
    </div>
}

<style>
    .title {
    color: #e63946;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
    margin-top: 2rem;
    font-size: 2.5rem;
    }

    .subtitle {
    text-align: center;
    font-size: 1.2rem;
    margin-bottom: 2rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #555;
    }

    form {
    max-width: 480px;
    margin: 0 auto 4rem;
    padding: 2rem;
    background: #f9f9f9;
    border-radius: 12px;
    box-shadow: 0 6px 15px rgba(230, 57, 70, 0.15);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .form-group {
    margin-bottom: 1.2rem;
    }

    .input {
    width: 100%;
    padding: 0.65rem 1rem;
    font-size: 1rem;
    border-radius: 6px;
    border: 1px solid #ddd;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
    }

    .input:focus {
    outline: none;
    border-color: #e63946;
    box-shadow: 0 0 5px #f94144a1;
    }

    label {
    margin-bottom: 0.3rem;
    display: block;
    font-weight: 600;
    }

    .form-inline {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    }

    .half {
    flex: 1;
    }

    .btn {
    width: 100%;
    padding: 0.9rem;
    font-size: 1.1rem;
    font-weight: 700;
    color: white;
    background: #e63946;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .btn:hover {
    background: #d62828;
    }

    .success-message {
    max-width: 480px;
    margin: 1rem auto;
    padding: 1.5rem 2rem;
    background-color: #a8dadc;
    border-radius: 10px;
    text-align: center;
    font-size: 1.3rem;
    color: #1d3557;
    box-shadow: 0 4px 14px #457b9d66;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .validation-message {
    color: #e63946;
    font-size: 0.9rem;
    }
</style>

@code {
    private DonationModel _donation = new DonationModel
		{
			FullName = "",
			Email = "",
			CardNumber = "",
			Expiry = "",
			CVV = "",
			PaymentMethod = ""
		};
    private bool _success = false;
    private EditContext _editContext;

    protected override void OnInitialized()
    {
        _donation = new DonationModel(); // Инициализация модели
        _editContext = new EditContext(_donation); // Затем создание контекста
    }
    public class RequiredIfPaymentMethodAttribute : ValidationAttribute
    {
        private readonly string _paymentMethod;

        public RequiredIfPaymentMethodAttribute(string paymentMethod)
        {
            _paymentMethod = paymentMethod;
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var donation = (DonationModel)validationContext.ObjectInstance;

            // Если выбран не наш метод оплаты - пропускаем валидацию
            if (donation.PaymentMethod != _paymentMethod)
                return ValidationResult.Success;

            // Для нашего метода оплаты проверяем значение
            if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
            {
                return new ValidationResult(ErrorMessage);
            }

            return ValidationResult.Success;
        }
    }
    private void OnPaymentMethodChanged(ChangeEventArgs e)
    {
        _donation.PaymentMethod = e.Value?.ToString();
        StateHasChanged(); // Принудительное обновление UI
    }

    private async Task HandleValidSubmit()
    {
        // Эта проверка избыточна, так как OnValidSubmit вызывается только при валидной форме
        if (_editContext.Validate())
        {
            // Создаем новое пожертвование
            var newDonation = new Donations
				{
					Id = Guid.NewGuid().ToString(),
					Name = _donation.FullName,
					Ammount = _donation.Amount?.ToString(),
					Date = DateTime.Now.ToString("yyyy-MM-dd")
				};

			// Добавляем в базу данных
			_context.Donations.Add(newDonation);
			await _context.SaveChangesAsync();

			_success = true;
			StateHasChanged();

			// Опционально: перенаправление после задержки
			await Task.Delay(3000);
			_navigationManager.NavigateTo("/");
		}
	}

	public class DonationModel
	{
        [Required(ErrorMessage = "Введите ФИО.")]
        [StringLength(150, ErrorMessage = "ФИО не должно превышать 150 символов.")]
        public string FullName { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "Почта недействительна.")]
        [StringLength(150, ErrorMessage = "Email не должен превышать 150 символов.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Введите сумму пожертвования.")]
        [Range(1, double.MaxValue, ErrorMessage = "Сумма должна быть не менее 1 рубля.")]
        public double? Amount { get; set; }

		[Required(ErrorMessage = "Выберите способ оплаты.")]
		public string PaymentMethod { get; set; } = string.Empty;

		//Credit Card specific validation
		[RequiredIfPaymentMethod("CreditCard", ErrorMessage = "Введите номер карты.")]
		[RegularExpression(@"^\d{13,16}$", ErrorMessage = "Неверный формат номера карты.")]
		public string CardNumber { get; set; }

		[RequiredIfPaymentMethod("CreditCard", ErrorMessage = "Введите срок действия.")]
		[RegularExpression(@"^(0[1-9]|1[0-2])\/?([0-9]{2})$", ErrorMessage = "Срок действия должен в формате MM/YY.")]
		public string Expiry { get; set; }

		[RequiredIfPaymentMethod("CreditCard", ErrorMessage = "Введите CVV.")]
		[RegularExpression(@"^\d{3,4}$", ErrorMessage = "Неверный CVV.")]
		public string CVV { get; set; }
	}

}


       

    

    
